/**
* Grails BuildConfig.
*
* @version $Revision$
* @author Last modified by $Author$
*
* Updated on $Date$
*/
grails.servlet.version = "3.0" // Change depending on target container compliance (2.5 or 3.0)
grails.project.class.dir = "target/classes"
grails.project.test.class.dir = "target/test-classes"
grails.project.test.reports.dir = "target/test-reports"
grails.project.work.dir = "target/work"
grails.project.target.level = 1.8
grails.project.source.level = 1.8
 
 
// Override default settings to place files instead of target folder.
grails.project.class.dir = "bin-groovy"
grails.project.test.class.dir = "bin-groovy"
grails.project.test.reports.dir = "test/reports"
grails.project.war.file = "MyWar.war"
 
// uncomment (and adjust settings) to fork the JVM to isolate classpaths
grails.project.fork = false
 
grails.project.dependency.resolver = "maven"
 
// Cobertura (see http://grails.org/plugin/code-coverage)
coverage {
    exclusions = ["BuildConfig*", "**/test/**", "org/**"]
}
 
 
// ---- Gradle/Artifactory Config ----//
String artifactoryRepo, artifactoryUser, artifactoryPassword
Properties gradleConfig = new Properties()
new File("$userHome/sample-gradle.properties").withReader {
    gradleConfig.load(it)
}
String artifactoryResolveRepoKey = "twowys_maven_deploy_virtual"
if(gradleConfig.artifactory_contextUrl) {
    artifactoryRepo = gradleConfig.artifactory_contextUrl + "/" + artifactoryResolveRepoKey
    artifactoryUser = gradleConfig.artifactory_user
    artifactoryPassword = gradleConfig.artifactory_password
}else{
	// TODO Restore
    //throw new IOException("***** ERROR: USER_HOME/.gradle/gradle.properties not configured for Artifactory!! ******")
}
//---- END Gradle/Artifactory Config ----//
 
grails.project.dependency.resolution = {
    System.setProperty("http.proxyHost", "");
    System.setProperty("http.proxyPort", "");
 
    // inherit Grails' default dependencies
    inherits("global") {
     // uncomment to disable ehcache
     // excludes 'ehcache'
     // excludes 'h2'
    }
    log "warn" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'
    checksums true // Whether to verify checksums on resolve
    legacyResolve false // whether to do a secondary resolve on plugin installation, not advised and here for backwards compatibility
 
    repositories {
        inherits true // Whether to inherit repository definitions from plugins
        mavenRepo (artifactoryRepo) {
            authentication(username: artifactoryUser, password: artifactoryPassword)
            updatePolicy "always"
        }
        grailsHome() // Resolves locally - Checks the local Grails distribution installation.
        mavenLocal() // Resolves locally - Checks the local Maven Cache
        grailsPlugins()  // Resolves locally - Checks the lib folder of every installed plugin in the current project.
    }
 
        dependencies {
        compile 'org.springframework:spring-aop:4.0.5.RELEASE'
        compile 'org.springframework:spring-expression:4.0.5.RELEASE'
        compile 'acme:architecture:3.30.0'
        compile 'commons-dbcp:commons-dbcp:1.4'
        runtime 'sybase:jconn4:16'
        compile 'commons-collections:commons-collections:3.2.2'
        compile 'acme:batch-util:2.2.0'
        compile ('displaytag:displaytag:1.2') {
            excludes "slf4j-log4j12"
        }
        compile 'jcs:jcs:1.2.6.5'
        test 'org.grails:grails-datastore-test-support:1.0-grails-2.4'
        test 'org.hamcrest:hamcrest-core:1.3'
        test 'org.hsqldb:hsqldb:2.3.2'
        compile 'concurrent:concurrent:1.0'
 
    }
 
    plugins {
        build ":tomcat:7.0.55"
        compile ':cache:1.1.8'
        runtime(":hibernate4:4.3.5.5"){
            excludes "release", "svn"
        }
        test ("org.grails.plugins:code-coverage:2.0.3-3"){
            excludes "release", "svn"
        }
    }
}
 
grails.war.resources = { stagingDir ->
delete(file:"${stagingDir}/WEB-INF/lib/commons-collections-3.2.1.jar")
delete(file:"${stagingDir}/WEB-INF/lib/h2-1.3.176.jar")
}